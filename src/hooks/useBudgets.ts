// src/hooks/useBudgets.ts - VERS√ÉO COM DEBUG PARA IDENTIFICAR PROBLEMA
import { useState, useEffect, useCallback } from 'react';
import { Alert } from 'react-native';
import { BudgetService } from '../services/BudgetService';
import { Budget } from '../types';

interface UseBudgetsReturn {
  budgets: Budget[];
  loading: boolean;
  refreshing: boolean;
  error: string | null;
  refresh: () => Promise<void>;
  deleteBudget: (id: string) => Promise<void>;
  adjustBudgetLimit: (id: string, newLimit: number) => Promise<void>;
}

export const useBudgets = (): UseBudgetsReturn => {
  const [budgets, setBudgets] = useState<Budget[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Carregar or√ßamentos
  const loadBudgets = useCallback(async (isRefreshing = false) => {
    try {
      console.log('üîÑ useBudgets.loadBudgets - Iniciando carregamento, isRefreshing:', isRefreshing);
      
      if (isRefreshing) {
        setRefreshing(true);
        console.log('‚ôªÔ∏è Modo refresh ativado');
      } else {
        setLoading(true);
        console.log('‚è≥ Modo loading ativado');
      }
      
      setError(null);
      
      console.log('üìû Chamando BudgetService.getBudgets...');
      const response = await BudgetService.getBudgets();
      console.log('üì° useBudgets - Resposta do BudgetService:', response);
      
      if (response.success) {
        console.log('‚úÖ Resposta bem-sucedida');
        console.log('üìä Or√ßamentos recebidos:', response.data);
        console.log('üìä Quantidade de or√ßamentos:', response.data.length);
        
        setBudgets(response.data);
        console.log('üíæ Estado budgets atualizado');
      } else {
        console.log('‚ùå Resposta com erro:', response.message);
        setError(response.message || 'Erro ao carregar or√ßamentos');
        setBudgets([]); // Limpar lista em caso de erro
      }
    } catch (err: any) {
      console.error('‚ùå Erro capturado no useBudgets:', err);
      console.error('‚ùå Stack trace:', err.stack);
      setError(err.message || 'Erro ao carregar or√ßamentos');
      setBudgets([]); // Limpar lista em caso de erro
    } finally {
      console.log('üèÅ Finalizando carregamento...');
      setLoading(false);
      setRefreshing(false);
      console.log('üèÅ Estados finais: loading=false, refreshing=false');
    }
  }, []);

  // Refresh dos or√ßamentos
  const refresh = useCallback(async () => {
    console.log('‚ôªÔ∏è useBudgets.refresh - Iniciando refresh...');
    await loadBudgets(true);
  }, [loadBudgets]);

  // Deletar or√ßamento
  const deleteBudget = useCallback(async (id: string) => {
    try {
      console.log('üóëÔ∏è useBudgets.deleteBudget - ID:', id);
      
      const response = await BudgetService.deleteBudget(id);
      console.log('üì° Resposta da exclus√£o:', response);
      
      if (response.success) {
        console.log('‚úÖ Or√ßamento exclu√≠do com sucesso');
        setBudgets(prev => {
          const updated = prev.filter(budget => budget._id !== id);
          console.log('üìä Lista atualizada ap√≥s exclus√£o:', updated.length, 'itens');
          return updated;
        });
        Alert.alert('Sucesso', 'Or√ßamento exclu√≠do com sucesso!');
      } else {
        console.log('‚ùå Erro na exclus√£o:', response.message);
        Alert.alert('Erro', response.message || 'Erro ao excluir or√ßamento');
      }
    } catch (err: any) {
      console.error('‚ùå Erro ao deletar or√ßamento:', err);
      Alert.alert('Erro', err.message || 'Erro ao excluir or√ßamento');
    }
  }, []);

  // Ajustar limite do or√ßamento
  const adjustBudgetLimit = useCallback(async (id: string, newLimit: number) => {
    try {
      console.log('üí∞ useBudgets.adjustBudgetLimit - ID:', id, 'Novo limite:', newLimit);
      
      const response = await BudgetService.adjustBudgetLimit(id, newLimit);
      console.log('üì° Resposta do ajuste de limite:', response);
      
      if (response.success && response.data) {
        console.log('‚úÖ Limite ajustado com sucesso');
        setBudgets(prev => {
          const updated = prev.map(budget => 
            budget._id === id ? response.data! : budget
          );
          console.log('üìä Lista atualizada ap√≥s ajuste de limite');
          return updated;
        });
        Alert.alert('Sucesso', 'Limite ajustado com sucesso!');
      } else {
        console.log('‚ùå Erro no ajuste de limite:', response.message);
        Alert.alert('Erro', response.message || 'Erro ao ajustar limite');
      }
    } catch (err: any) {
      console.error('‚ùå Erro ao ajustar limite:', err);
      Alert.alert('Erro', err.message || 'Erro ao ajustar limite');
    }
  }, []);

  // Carregar or√ßamentos ao montar o componente
  useEffect(() => {
    console.log('üéØ useBudgets - useEffect disparado, carregando or√ßamentos...');
    loadBudgets();
  }, [loadBudgets]);

  // Log do estado atual sempre que mudar
  useEffect(() => {
    console.log('üìä useBudgets - Estado atual:');
    console.log('  - budgets.length:', budgets.length);
    console.log('  - loading:', loading);
    console.log('  - refreshing:', refreshing);
    console.log('  - error:', error);
    
    if (budgets.length > 0) {
      console.log('  - primeiros or√ßamentos:', budgets.slice(0, 2));
    }
  }, [budgets, loading, refreshing, error]);

  return {
    budgets,
    loading,
    refreshing,
    error,
    refresh,
    deleteBudget,
    adjustBudgetLimit,
  };
};